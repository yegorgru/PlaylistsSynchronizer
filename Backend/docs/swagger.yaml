basePath: /
definitions:
  models.AccessTokenResponse:
    properties:
      accessToken:
        type: string
    type: object
  models.AddTrackInput:
    properties:
      name:
        minLength: 1
        type: string
      spotifyUri:
        minLength: 1
        type: string
      youTubeMusicID:
        minLength: 1
        type: string
    required:
    - name
    - spotifyUri
    - youTubeMusicID
    type: object
  models.AllGroupData:
    properties:
      description:
        type: string
      name:
        type: string
      playListID:
        type: integer
      tracks:
        items:
          $ref: '#/definitions/models.Track'
        type: array
      users:
        items:
          $ref: '#/definitions/models.UserGroupData'
        type: array
    type: object
  models.CreateResponse:
    properties:
      id:
        type: integer
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.Group:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    required:
    - description
    - name
    type: object
  models.PlayList:
    properties:
      description:
        type: string
      groupID:
        type: integer
      id:
        type: integer
      name:
        type: string
    required:
    - description
    - groupID
    - name
    type: object
  models.RefreshTokenInput:
    properties:
      userId:
        type: integer
    required:
    - userId
    type: object
  models.StatusResponse:
    properties:
      status:
        type: string
    type: object
  models.Track:
    properties:
      id:
        type: integer
      name:
        type: string
      spotifyUri:
        type: string
      youTubeMusicID:
        type: string
    type: object
  models.UpdateGroupInput:
    properties:
      description:
        maxLength: 50
        minLength: 1
        type: string
      name:
        maxLength: 20
        minLength: 1
        type: string
    type: object
  models.UpdatePlayListInput:
    properties:
      description:
        maxLength: 50
        minLength: 1
        type: string
      name:
        maxLength: 20
        minLength: 1
        type: string
    type: object
  models.UpdateUserGroupInput:
    properties:
      role:
        maxLength: 20
        minLength: 1
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      platform:
        type: string
      username:
        type: string
    required:
    - email
    - platform
    - username
    type: object
  models.UserCreateGroupInput:
    properties:
      groupDescription:
        maxLength: 50
        minLength: 1
        type: string
      groupName:
        maxLength: 20
        minLength: 1
        type: string
      playListDescription:
        maxLength: 50
        minLength: 1
        type: string
      playListName:
        maxLength: 20
        minLength: 1
        type: string
    required:
    - groupDescription
    - groupName
    - playListDescription
    - playListName
    type: object
  models.UserGroupData:
    properties:
      email:
        type: string
      id:
        type: integer
      platform:
        type: string
      roleName:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API Server for Playlist Synchronizer Application
  title: Playlist Synchronizer API
  version: "1.0"
paths:
  /api/groups:
    get:
      description: get all groups
      operationId: get-all-groups
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Group'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get All Groups
      tags:
      - groups
    post:
      consumes:
      - application/json
      description: create new group
      operationId: create-group
      parameters:
      - description: group and playlist info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.UserCreateGroupInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create Group
      tags:
      - groups
  /api/groups/{id}:
    delete:
      description: delete group
      operationId: delete-group
      parameters:
      - description: group id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete Group
      tags:
      - groups
    get:
      description: get group by id
      operationId: get-group-by-id
      parameters:
      - description: group id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AllGroupData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Group By ID
      tags:
      - groups
    put:
      consumes:
      - application/json
      description: update group
      operationId: update-group
      parameters:
      - description: group id
        in: path
        name: id
        required: true
        type: integer
      - description: group info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.UpdateGroupInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Group
      tags:
      - groups
  /api/groups/{id}/leave:
    post:
      description: leave group
      operationId: leave-group
      parameters:
      - description: group id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Leave Group
      tags:
      - user-groups
  /api/groups/{id}/users:
    get:
      description: get all users from group
      operationId: get-all-users-from-group
      parameters:
      - description: group id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserGroupData'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get All Users From Group
      tags:
      - user-groups
    post:
      description: add user to group
      operationId: add-user-to-group
      parameters:
      - description: group id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Add User To Group
      tags:
      - user-groups
  /api/groups/{id}/users/{userID}:
    delete:
      description: delete user by id from group
      operationId: delete-user-by-id-from-group
      parameters:
      - description: group id
        in: path
        name: id
        required: true
        type: integer
      - description: user id
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete User By ID From Group
      tags:
      - user-groups
    get:
      description: get user by id from group
      operationId: get-user-by-id-from-group
      parameters:
      - description: group id
        in: path
        name: id
        required: true
        type: integer
      - description: user id
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserGroupData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get User By ID From Group
      tags:
      - user-groups
    put:
      consumes:
      - application/json
      description: update user by id from group
      operationId: update-user-by-id-from-group
      parameters:
      - description: group id
        in: path
        name: id
        required: true
        type: integer
      - description: user id
        in: path
        name: userID
        required: true
        type: integer
      - description: new user role
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserGroupInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update User By ID From Group
      tags:
      - user-groups
  /api/playlists:
    get:
      description: get all playlists
      operationId: get-all-playlists
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PlayList'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get All Playlist
      tags:
      - playlists
  /api/playlists/{id}:
    get:
      description: get playlist by id
      operationId: get-playlist-by-id
      parameters:
      - description: playlist id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PlayList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Playlist By ID
      tags:
      - playlists
    put:
      consumes:
      - application/json
      description: update playlist
      operationId: update-playlist
      parameters:
      - description: playlist id
        in: path
        name: id
        required: true
        type: integer
      - description: playlist info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePlayListInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Playlist
      tags:
      - playlists
  /api/playlists/{id}/tracks:
    post:
      consumes:
      - application/json
      description: add new track
      operationId: add-track
      parameters:
      - description: playlist id
        in: path
        name: id
        required: true
        type: integer
      - description: track info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.AddTrackInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Add Track
      tags:
      - tracks
  /api/playlists/{id}/tracks/{trackID}:
    delete:
      description: delete track
      operationId: delete-track
      parameters:
      - description: playlist id
        in: path
        name: id
        required: true
        type: integer
      - description: track id
        in: path
        name: trackID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete Track
      tags:
      - tracks
  /api/users/{id}:
    get:
      description: get user by id
      operationId: get-user-by-id
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get User By ID
      tags:
      - users
  /api/users/me:
    get:
      description: get current user
      operationId: get-current-user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Current User
      tags:
      - users
  /auth/logout:
    post:
      description: logout from service
      operationId: logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Logout
      tags:
      - auth
  /refresh-token:
    post:
      consumes:
      - application/json
      description: refresh access token
      operationId: refresh-token
      parameters:
      - description: user id for token refresh
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AccessTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: RefreshToken
      tags:
      - auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
